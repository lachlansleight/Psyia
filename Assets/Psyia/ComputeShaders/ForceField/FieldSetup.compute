// We need to manually mark what our kernel names are
#pragma kernel SetupForceField

//let's give ourselves a million threads - 10 * 10 * 10 * 10 * 10 * 10
#define thread_group_x 8
#define thread_group_y 8
#define thread_group_z 8
#define thread_x 8
#define thread_y 8
#define thread_z 8

//controller positions
float3 FieldStartPos;
float3 FieldEndPos;
float3 FieldCount;

struct FieldStruct {
	float4 pos;
	float4 instantForce;
	float4 attenuatingForce;
};

RWStructuredBuffer<FieldStruct> ForceField;

[numthreads(8, 8, 8)]
void SetupForceField(uint3 dtid : SV_DispatchThreadID)
{
	int id = dtid.x + (dtid.y * thread_group_x * thread_x) + (dtid.z * thread_group_x * thread_y * thread_group_y * thread_z);
	FieldStruct ThisFieldPoint = ForceField[id];

	float idF = (float)id;
	float3 FieldPos = float3(floor(idF / (FieldCount.z * FieldCount.y)), floor(idF / FieldCount.z) % FieldCount.y, idF % FieldCount.z);
	FieldPos /= FieldCount;

	float PosW = 0;
	if (FieldPos.x == 0 || FieldPos.x == 1 || FieldPos.y == 0 || FieldPos.y == 1 || FieldPos.z == 0 || FieldPos.z == 1) {
		float PosW = 1;
	}

	FieldPos -= float3(0.5, 0, 0.5);
	FieldPos *= (FieldEndPos - FieldStartPos);

	ThisFieldPoint.pos = float4(FieldPos, PosW);
	ThisFieldPoint.instantForce = float4(0, 0, 0, 0);
	ThisFieldPoint.attenuatingForce = float4(0, 0, 0, 0);

	//And finally, push the updated particle to the buffer
	ForceField[id] = ThisFieldPoint;
}