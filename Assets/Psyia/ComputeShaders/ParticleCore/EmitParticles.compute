//Responsible for taking particles from the DeadList and making them come alive!

#pragma kernel EmitParticles

//includes
#include "Assets/Psyia/ComputeShaders/Includes/Structs.hlsl"

RWStructuredBuffer<ParticleData> ParticleBuffer;
ConsumeStructuredBuffer<uint> DeadList;

float3 SpawnPosition;
float3 LastSpawnPosition;

float3 SpawnVelocity;
float3 LastSpawnVelocity;

float SpawnRadius;
float SpawnVelocityScatter;
float SpawnInheritVelocity;

float Time;

//returns random from 0 to 1
float rand(float n1, float n2) {
	return frac(sin(dot(float2(n1, n2), float2(12.9898, 78.233))) * 43758.5453);
}

//returns random vector from (0, 0, 0) to (1, 1, 1)
float3 randVec(float seed) {
	float3 seedA = float3(seed * 1.107, seed * 2.1234, seed * 3.926);
	float3 seedB = float3(seed * 4.476, seed * 5.108, seed * 6.387);

	return float3(rand(seedA.x, seedB.x), rand(seedA.y, seedB.y), rand(seedA.z, seedB.z));
}

[numthreads(1,1,1)]
void EmitParticles() {
	//Consume a particle from the dead list
	uint newIndex = DeadList.Consume();
	ParticleData CurrentParticle = ParticleBuffer[newIndex];

	//Reset particle age and mark as alive
	CurrentParticle.Age = 0;
	CurrentParticle.IsAlive = 1;
	
	float3 seed = float3(newIndex * 0.01 + Time, newIndex * 0.01 + Time * 0.38762, newIndex * 0.01 + Time * 1.5863);

	//Spawn randomly along line from last controller position to current controller position
	float PositionLerpFactor = rand(seed.x, seed.y);
	CurrentParticle.Position = lerp(LastSpawnPosition, SpawnPosition, PositionLerpFactor);

	//Also lerp velocity linearly between two points
	float3 SpawnVelocityLerped = lerp(LastSpawnVelocity, SpawnVelocity, PositionLerpFactor);
	float3 InheritedSpawnVelocity = (SpawnVelocityLerped * SpawnInheritVelocity);

	//Add a small spherical offset to spawn in small sphere
	float3 SpawnPositionOffset = normalize(randVec(seed.x) - float3(0.5, 0.5, 0.5));
	CurrentParticle.Position += SpawnPositionOffset * SpawnRadius * rand(seed.x, seed.z);

	//Create random initial velocity
	float3 SpawnScatterVelocityDirection = normalize(randVec(seed.y) - float3(0.5, 0.5, 0.5));
	float SpawnScatterVelocityStrength = rand(seed.x, seed.y) * SpawnVelocityScatter;
	float3 SpawnScatterVelocity = SpawnScatterVelocityDirection * SpawnScatterVelocityStrength;

	//Apply velocity
	CurrentParticle.Velocity = SpawnScatterVelocity + InheritedSpawnVelocity;

	ParticleBuffer[newIndex] = CurrentParticle;
}