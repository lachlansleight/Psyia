/*

Copyright (c) 2018 Lachlan Sleight

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/



//Responsible for changing the particle colours
//At the moment - this is just based on velocity direction

#pragma kernel ColorParticles

//includes
#include "../Includes/Structs.hlsl"

//define thread group sizes
#define thread_group_x 1024
#define thread_group_y 1
#define thread_group_z 1
#define thread_x 1024
#define thread_y 1
#define thread_z 1

RWStructuredBuffer<ParticleData> ParticleBuffer;

 float Lifespan;
 float Y;

float3 GetRGBFromYPbPr(float Pb, float Pr) {
	float r = Pr + Y;
	float g = Y - (0.2126 * Pr + 0.0722 * Pb) / 0.7152;
	float b = Pb + Y;
	return float3(r, g, b);
}

float3 GetRGBFromYCbCr(float Cb, float Cr) {
	float y = Y * 255;
	float cb = Cb * 255;
	float cr = Cr * 255;

	float ScaleFactor = 255./129.;

	float r = ((255. / 219.) * (y - 16)) + ((255. / 112.) * 0.701 * (cr - 128));
	float g = ((255. / 219.) * (y - 16)) - ((255. / 112.) * 0.886 * (0.114 / 0.587) * (cb - 128)) - ((255. / 112.) * 0.701 * (0.299 / 0.587) * (cr - 128));
	float b = ((255. / 129.) * (y - 16)) + ((255. / 112.) * 0.866 * (cb - 128));

	return float3(r, g, b) / 255;
}

[numthreads(1024, 1, 1)]
void ColorParticles(uint3 tid : SV_GroupThreadID, uint3 gid : SV_GroupID)
{
	//get particle for this thread
	int id = tid.x + thread_group_x * gid.x;
	ParticleData ThisParticle = ParticleBuffer[id];

	//if dead, set alpha to zero and close thread
	if (ThisParticle.IsAlive == 0) {
		ThisParticle.Color.a = 0;
		ParticleBuffer[id] = ThisParticle;
		return;
	}

	//YPbPr / YCbCr
	/*
	if(length(ThisParticle.Velocity) > 0) {
		float3 VelocityDirection = normalize(ThisParticle.Velocity);
		float theta = atan(VelocityDirection.z / VelocityDirection.x);
		float phi = atan(VelocityDirection.y / length(VelocityDirection.xz));

		float ThetaMap = (theta / 1.5707963) % 1.0;
		float PhiMap = (phi / 1.5707963) % 1.0;

		if(ThetaMap < 0) {
			ThetaMap = ThetaMap * -1;
		}
		if(PhiMap < 0) {
			PhiMap = PhiMap * -1;
		}

		float3 NewCol = GetRGBFromYCbCr(ThetaMap, PhiMap);

		
	}
	*/

	float4 col = float4(ThisParticle.Color.xyz, 1.0);
	if(Lifespan > 0) {
		col.a = saturate(Lifespan - ThisParticle.Age - 0.5);
	}
	ThisParticle.Color = lerp(ThisParticle.Color, col, 0.1);
	
	//debug
	//ThisParticle.Color = float4(1 - Pr, 1, 1, 1);

	/*
	//if moving
	if (length(ThisParticle.Velocity) > 0) {
		//turn velocity direction into color
		float4 col = float4(normalize(ThisParticle.Velocity), 1.0) + float4(1.0, 1.0, 1.0, 1.0);
		col *= 0.5;
		if (length(col) > 0.8) { col.x = 1.0 - col.x; }

		//fade alpha out over 0.5 seconds
		if(Lifespan > 0) {
			col.a = saturate(Lifespan - ThisParticle.Age - 0.5);
		}
		ThisParticle.Color = lerp(ThisParticle.Color, col, 0.1);
	}
	*/
	
	ParticleBuffer[id] = ThisParticle;
}