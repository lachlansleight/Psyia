/*

Copyright (c) 2018 Lachlan Sleight

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/



//Sorts particles by distance over multiple frames

#pragma kernel SortParticles

//includes
#include "../Includes/Structs.hlsl"

RWStructuredBuffer<DistanceData> DistanceBuffer;

int Stage;
int SubStage;

int Ascending;

[numthreads(1024, 1, 1)]
void SortParticles(uint3 tid : SV_GroupThreadID, uint3 gid : SV_GroupID)
{
	//Get current index from thread ID
	uint CurrentIndex = tid.x + 1024 * gid.x;

	//Determine length of comparator arrows
	uint CurrentLength = pow(2, Stage - SubStage);

	//Get comparator index
	uint TargetIndex = CurrentIndex + CurrentLength;
	
	//We use this a lot, so calculate it now
	uint IndexOverLength = CurrentIndex / CurrentLength;

	//Do we skip this comparison (is the current index the TargetIndex of a previous comparison?)
	bool Skip = 0;

	//This is the secret sauce - algorithms for determining whether to skip!
	if (SubStage == 0) {
		Skip = IndexOverLength % 2 > 0;
	}
	else if (SubStage == 1) {
		Skip = IndexOverLength % 4 != 1;
	}
	else {
		uint ExtraPower = pow(2, SubStage + 1);
		Skip = IndexOverLength % 2 < 1 || IndexOverLength % ExtraPower == ExtraPower - 1;
	}

	//If we should do a comparison...
	if (!Skip) {
		//Get the two elements
		DistanceData a = DistanceBuffer[CurrentIndex];
		DistanceData b = DistanceBuffer[TargetIndex];

		//Determine order
		bool aIsGreater = a.Distance > b.Distance;

		//If the order doesn't match our target order, swap the two items
		if ((aIsGreater && Ascending == 1) || (!aIsGreater && Ascending == 0)) {
			DistanceBuffer[CurrentIndex] = b;
			DistanceBuffer[TargetIndex] = a;
		}
	}
}