/*

Copyright (c) 2018 Lachlan Sleight

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/



//Responsible for determining each particle's distance to the headset

#pragma kernel CalculateDistances

//Includes
#include "../Includes/Structs.hlsl"

//define thread group sizes
#define thread_group_x 1024
#define thread_group_y 1
#define thread_group_z 1
#define thread_x 1024
#define thread_y 1
#define thread_z 1

float3 CameraPosition;
float4x4 InverseSystemMatrix;
float4x4 SystemMatrix;

RWStructuredBuffer<ParticleData> ParticleBuffer;
RWStructuredBuffer<DistanceData> DistanceBuffer;

[numthreads(1024, 1, 1)]
void CalculateDistances(uint3 tid : SV_GroupThreadID, uint3 gid : SV_GroupID)
{
	//get current distance item ID
	int id = tid.x + thread_group_x * gid.x;
	DistanceData CurrentDistance = DistanceBuffer[id];

	//Get particle from distance ID
	ParticleData CurrentParticle = ParticleBuffer[CurrentDistance.Index];

	//Determine new distance
	//multiply CurrentParticle.Position with SystemMatrix here
	CurrentDistance.Distance = length(CameraPosition - mul(SystemMatrix, float4(CurrentParticle.Position, 1)).xyz);

	DistanceBuffer[id] = CurrentDistance;
}